# Setting Up a Reusable Python Project Structure: Step-by-Step Guide

This guide will walk you through setting up a well-documented, well-structured, and reusable Python project using Visual Studio Code on a Windows system. We'll cover best practices, including virtual environments, project structure, dependencies, documentation, and more.

---

## Table of Contents

1. [Prerequisites](#prerequisites)
2. [Step 1: Create the Project Directory](#step-1-create-the-project-directory)
3. [Step 2: Initialize Git Repository](#step-2-initialize-git-repository)
4. [Step 3: Set Up a Virtual Environment](#step-3-set-up-a-virtual-environment)
5. [Step 4: Create the Project Structure](#step-4-create-the-project-structure)
6. [Step 5: Manage Dependencies](#step-5-manage-dependencies)
7. [Step 6: Create a Setup File for Packaging](#step-6-create-a-setup-file-for-packaging)
8. [Step 7: Configure .gitignore](#step-7-configure-gitignore)
9. [Step 8: Set Up Documentation](#step-8-set-up-documentation)
10. [Step 9: Configure Linters and Formatters](#step-9-configure-linters-and-formatters)
11. [Step 10: Add Sample Code and Tests](#step-10-add-sample-code-and-tests)
12. [Conclusion](#conclusion)

---

## Prerequisites

- **Python** installed on your system (preferably Python 3.8 or higher)
- **Visual Studio Code** installed
- **Git** installed (optional but recommended for version control)

---

## Step 1: Create the Project Directory

First, create a new directory for your project.

```bash
# Open Command Prompt or PowerShell
mkdir my_project
cd my_project
```

---

## Step 2: Initialize Git Repository

Initialize a Git repository to manage version control.

```bash
git init
```

---

## Step 3: Set Up a Virtual Environment

Create a virtual environment to manage project-specific dependencies.

```bash
# Create a virtual environment named 'venv'
python -m venv venv

# Activate the virtual environment
# For Command Prompt:
venv\Scripts\activate.bat

# For PowerShell:
venv\Scripts\Activate.ps1
```

**Note:** If you're using PowerShell and encounter an execution policy error, you may need to run:

```powershell
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
```

---

## Step 4: Create the Project Structure

Organize your project with the following structure:

```
my_project/
├── venv/
├── src/
│   └── my_package/
│       ├── __init__.py
│       └── main.py
├── tests/
│   └── test_main.py
├── docs/
├── .gitignore
├── requirements.txt
├── setup.py
└── README.md
```

### Create Directories

```bash
mkdir src
mkdir src\my_package
mkdir tests
mkdir docs
```

### Create Initial Files

- **`src/my_package/__init__.py`**

  ```python
  # This file makes 'my_package' a Python package.
  ```

- **`src/my_package/main.py`**

  ```python
  def main():
      print("Hello, World!")

  if __name__ == "__main__":
      main()
  ```

- **`tests/test_main.py`**

  ```python
  import unittest
  from my_package.main import main

  class TestMain(unittest.TestCase):
      def test_main_output(self):
          # Test code goes here
          pass

  if __name__ == '__main__':
      unittest.main()
  ```

- **`README.md`**

  ```markdown
  # My Project

  A brief description of my project.
  ```

---

## Step 5: Manage Dependencies

Use `requirements.txt` to manage your project's dependencies.

```bash
# Create requirements.txt
echo "# Project dependencies" > requirements.txt
```

Install any required packages and update `requirements.txt`.

```bash
# Example: Install requests library
pip install requests

# Freeze installed packages into requirements.txt
pip freeze > requirements.txt
```

---

## Step 6: Create a Setup File for Packaging

Prepare your project for distribution by creating a `setup.py` file.

- **`setup.py`**

  ```python
  from setuptools import setup, find_packages

  setup(
      name='my_package',
      version='0.1.0',
      author='Your Name',
      author_email='your.email@example.com',
      description='A brief description of your package',
      packages=find_packages(where='src'),
      package_dir={'': 'src'},
      install_requires=[
          # List your project's dependencies
      ],
      classifiers=[
          'Programming Language :: Python :: 3',
          'Operating System :: OS Independent',
      ],
      python_requires='>=3.8',
  )
  ```

---

## Step 7: Configure .gitignore

Exclude unnecessary files from your Git repository.

- **`.gitignore`**

  ```gitignore
  # Byte-compiled / optimized / DLL files
  __pycache__/
  *.py[cod]

  # Virtual environment
  venv/

  # Distribution / packaging
  build/
  dist/
  *.egg-info/

  # IDE files
  .vscode/
  ```

---

## Step 8: Set Up Documentation

Generate project documentation using Sphinx.

### Install Sphinx

```bash
pip install sphinx
```

### Initialize Sphinx in the `docs/` Directory

```bash
cd docs
sphinx-quickstart
```

Follow the prompts to configure Sphinx. Update `conf.py` if necessary.

---

## Step 9: Configure Linters and Formatters

Ensure code quality by setting up linters and formatters like `flake8` and `black`.

### Install flake8 and black

```bash
pip install flake8 black
```

### Configure flake8

- **`.flake8`**

  ```ini
  [flake8]
  max-line-length = 88
  exclude = venv/, .git/, __pycache__/
  ```

### Configure Visual Studio Code Settings

- Open VSCode settings (`Ctrl + ,`) and search for `python formatting provider`. Set it to `black`.
- Install the Python extension in VSCode if you haven't already.

---

## Step 10: Add Sample Code and Tests

Create sample modules and unit tests to ensure everything is set up correctly.

### Sample Module

- **`src/my_package/utils.py`**

  ```python
  def add(a, b):
      return a + b
  ```

### Corresponding Test

- **`tests/test_utils.py`**

  ```python
  import unittest
  from my_package.utils import add

  class TestUtils(unittest.TestCase):
      def test_add(self):
          self.assertEqual(add(2, 3), 5)

  if __name__ == '__main__':
      unittest.main()
  ```

### Run Tests

```bash
python -m unittest discover -s tests
```

---

## Conclusion

You've now set up a Python project following best practices. Your project is:

- **Well-Structured**: Organized directories for source code, tests, and documentation.
- **Reusable**: Prepared for packaging and distribution.
- **Documented**: Documentation set up with Sphinx.
- **Maintainable**: Code quality ensured with linters and formatters.
- **Isolated**: Dependencies managed with a virtual environment.

**Next Steps:**

- Start developing your project within the `src/my_package/` directory.
- Add more tests in the `tests/` directory as you develop new features.
- Update the documentation in the `docs/` directory.
- Commit your changes with Git and consider pushing to a remote repository like GitHub.

---

**Happy Coding!**
